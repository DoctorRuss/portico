<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="cpp">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		C++ build profile for the Portico Open Source RTI on Mac OS X
	</description>

	<!-- ==== Basic Properties ==== -->
	<property name="cpp.build.dir"             location="${build.dir}/cpp/macosx"/>

	<!-- Get a reference to the JDK we want to use, falling back on the given default -->
	<getJdk property="jdk.home.macosx" arch="amd64" fallback="${jdk.default.macosx}"/>

	<!-- ============================================== -->
	<!-- ==== HLA13 and DLC13 Interface Properties ==== -->
	<!-- ============================================== -->
	<!-- source -->
	<property name="hla13.src.dir"             location="${cpp.src.dir}/hla13/src"/>
	<property name="hla13.include.dir"         location="${cpp.src.dir}/hla13/include"/>
	<property name="hla13.test.src.dir"        location="${cpp.src.dir}/hla13/test"/>
	<property name="hla13.example.dir"         location="${cpp.src.dir}/hla13/example"/>
	
	<!-- hla13 build -->
	<property name="hla13.build.dir"           location="${cpp.build.dir}/hla13"/>
	<property name="hla13.complete.dir"        location="${hla13.build.dir}/complete"/>
	<property name="hla13.obj.dir"             location="${hla13.build.dir}/obj"/>

	<!-- dlc13 build -->
	<property name="dlc13.build.dir"           location="${cpp.build.dir}/dlc13"/>
	<property name="dlc13.complete.dir"        location="${dlc13.build.dir}/complete"/>
	<property name="dlc13.obj.dir"             location="${dlc13.build.dir}/obj"/>

	<!-- hla13 test build -->
	<property name="test13.build.dir"          location="${cpp.build.dir}/test13"/>
	<property name="test13.complete.dir"       location="${test13.build.dir}/complete"/>
	<property name="test13.obj.dir"            location="${test13.build.dir}/obj"/>

	<!-- ========================================= -->
	<!-- ==== IEEE-1516e Interface Properties ==== -->
	<!-- ========================================= -->
	<property name="ieee1516e.src.dir"         location="${cpp.src.dir}/ieee1516e/src"/>
	<property name="ieee1516e.include.dir"     location="${cpp.src.dir}/ieee1516e/include"/>
	<property name="ieee1516e.example.dir"     location="${cpp.src.dir}/ieee1516e/example"/>

	<!-- ieee1516e build -->
	<property name="ieee1516e.build.dir"       location="${cpp.build.dir}/ieee1516e"/>
	<property name="ieee1516e.complete.dir"    location="${ieee1516e.build.dir}/complete"/>
	<property name="ieee1516e.obj.dir"         location="${ieee1516e.build.dir}/obj"/>
	
	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- These properties are set so that any information relating to a specific path
	     for a library can be changed in a single spot. The properties should be used
	     when defining paths and the like later in the build file -->
	<property name="cppunit.dir"           location="${lib.dir}/cppunit/cppunit-1.12.1"/>
	<property name="cppunit.include"       location="${cppunit.dir}/include"/>
	<property name="cppunit.lib"           location="${cppunit.dir}/macosx"/>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="master.clean">
		<delete dir="${cpp.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent compilation target. This will compile all the core Portico C++
	     interface and the associated unit test suite code.
	-->
	<target name="compile"
	        extensionOf="master.compile"
	        description="Compile the Portico C++ interfaces and Testing Suite for Mac OS X"
	        depends="compile.hla13, compile.dlc13, compile.ieee1516e, compile.ieee1516e.example"/>

	<!-- ======================================= -->
	<!--            HLA 1.3 Interface            -->
	<!-- ======================================= -->
	<target name="compile.hla13">
		<cpp-unix outfile="RTI-NG"
		          workdir="${hla13.build.dir}"
		          arch="amd64"
		          compilerArgs="-O1 -fPIC -Wall -Wno-non-virtual-dtor"
		          linkerArgs="-dynamiclib">
			<fileset dir="${hla13.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}/hla13"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
			<define name="BUILDING_RTI"/>
			<define name="BUILDING_FEDTIME"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<library path="${jdk.home.macosx}/jre/lib/server" libs="jvm,jsig"/>
		</cpp-unix>

		<!-- === Create the SymLink === -->
		<!-- we can't use the symlink task because it will create links based
		     on the full path name (whereas we want relative links) -->
		<echo>creating symlinks...</echo>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="libRTI-NG"/>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="libRTI-NGd"/>
	</target>

	<!-- ==================================== -->
	<!--           DLC 1.3 Interface          -->
	<!-- ==================================== -->
	<target name="compile.dlc13">
		<cpp-unix outfile="rti13"
		          workdir="${dlc13.build.dir}"
		          arch="amd64"
		          compilerArgs="-O1 -fPIC -Wall -Wno-non-virtual-dtor"
		          linkerArgs="-dynamiclib">
			<fileset dir="${hla13.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}/dlc13"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
			<define name="BUILDING_RTI"/>
			<define name="BUILDING_DLC"/>
			<define name="BUILDING_FEDTIME"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<library path="${jdk.home.macosx}/jre/lib/server" libs="jvm,jsig"/>
		</cpp-unix>

		<!-- === Create the SymLink === -->
		<!-- we can't use the symlink task because it will create links based
		     on the full path name (whereas we want relative links) -->
		<echo>creating symlinks...</echo>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="librti13"/>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="librti13d"/>
	</target>

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="compile.hla13.test" depends="compile.hla13">
		<cpp-unix outfile="test13"
		          workdir="${test13.build.dir}"
		          type="executable"
		          arch="amd64"
		          compilerArgs="-g -Wno-write-strings"
		          linkerArgs="">
			<fileset dir="${hla13.test.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}/hla13"/>
			<includepath path="${hla13.src.dir}/hla/time"/>
			<includepath path="${cppunit.include}"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<library path="${hla13.complete.dir}" libs="RTI-NG"/>
			<library path="${cppunit.lib}" libs="cppunit"/>
		</cpp-unix>
	</target>

	<!-- ==================================== -->
	<!--            1516e Interface           -->
	<!-- ==================================== -->
	<target name="compile.ieee1516e">
		<cpp-unix outfile="librti1516e.dylib"
		          workdir="${ieee1516e.build.dir}"
		          arch="amd64"
		          compilerArgs="-O1 -fPIC -Wall -Wno-non-virtual-dtor">
			<fileset dir="${ieee1516e.src.dir}" includes="**/*.cpp"/>
			<includepath path="${ieee1516e.include.dir}"/>
			<includepath path="${ieee1516e.src.dir}"/>
			<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
			<define name="BUILDING_RTI"/>
			<define name="BUILDING_FEDTIME"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="RTI_DISABLE_WARNINGS"/>
			<library path="${jdk.home.macosx}/jre/lib/server" libs="jvm,jsig"/>
		</cpp-unix>

		<!-- === Create the SymLink === -->
		<!-- we can't use the symlink task because it will create links based
		     on the full path name (whereas we want relative links) -->
		<echo>creating symlinks...</echo>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="librti1516e"/>
		<symlink-dylib directory="${hla13.build.dir}/complete" name="librti1516ed"/>
	</target>

	<!-- ==================================== -->
	<!--        1516e Example Federate        -->
	<!-- ==================================== -->
	<!-- Compiles the 1516e example federate. Doesn't do much except
	     assure that we can actually compile and link it to Portico -->
	<target name="compile.ieee1516e.example" depends="compile.ieee1516e">
		<cpp-unix outfile="ieee1516e-example"
		          workdir="${ieee1516e.build.dir}/ieee1516e-example"
		          type="executable"
		          arch="amd64"
		          compilerArgs="-g -O1 -fPIC -Wall -Wno-non-virtual-dtor"
		          linkerArgs="">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*.cpp"/>
			<includepath path="${ieee1516e.include.dir}"/>
			<includepath path="${jdk.home.macosx}/include;${jdk.home.macosx}/include/darwin"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="RTI_DISABLE_WARNINGS"/>
			<library path="${ieee1516e.build.dir}/complete" libs="rti1516e"/>
			<library path="${jdk.home.macosx}/jre/lib/server" libs="jvm,jsig"/>
		</cpp-unix>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->
	<!-- Depends on java.sandbox so the jar file is constructed for the C++ side to call into -->
	<target name="test" extensionOf="master.test" depends="compile, java.sandbox, test.hla13"/>

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test.hla13" depends="java.sandbox,compile.hla13.test">
		<!-- 1. copy the testing resources into test dir (RID file etc...) -->
		<copy todir="${test13.complete.dir}">
			<fileset dir="${resources.testdata.dir}/cpptest/hla13" includes="**/*"/>
			<filterset begintoken="[" endtoken="]">
				<filter token="jarfile" value="${dist.lib.dir}/portico.jar"/>
			</filterset>
		</copy>
		<chmod dir="${test13.complete.dir}" perm="777" includes="**/*.sh"/>
		<echo>Copied testing resources to ${test13.complete.dir}</echo>

		<!-- 2. run the actual test application -->
		<exec dir="${test13.complete.dir}"
		      executable="${test13.complete.dir}/test13"
		      failonerror="false"
		      failifexecutionfails="false"
		      resultproperty="test13.result">
			<arg line="${test13.complete.dir}/test-results.xml"/>
			<env key="RTI_HOME" path="."/><!-- required, but we set the env up properly anyway -->
			<env key="DYLD_LIBRARY_PATH" path="${jdk.home.macosx}/jre/lib/server;${hla13.complete.dir};${cppunit.lib}"/>
			<env key="CLASSPATH" path="${dist.lib.dir}/portico.jar"/>
			<env key="PORTICO_JNICHECK" value="true"/>
			<env key="TEST.GROUP" value="${test.group}"/>
		</exec>
		
		<!-- 3. Generate the report. This will fail the build if any of the tests failed -->
<!--
		<echo>Generating the Unit Test Report</echo>
		<cppunit-report result="${test13.result}"
		                xmlfile="${test13.complete.dir}/test-results.xml"
		                xslfile="${test13.complete.dir}/xsl/results.xsl"
		                outfile="${test13.complete.dir}/test-results.html"/>
-->
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="master.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<!-- HLA 1.3 -->
		<mkdir dir="${dist.sandbox.dir}/include/hla13"/>
		<copy todir="${dist.sandbox.dir}/include/hla13">
			<fileset dir="${hla13.include.dir}/hla13" includes="**/*"/>
		</copy>
		<!-- DLC 1.3 -->
		<mkdir dir="${dist.sandbox.dir}/include/dlc13"/>
		<copy todir="${dist.sandbox.dir}/include/dlc13">
			<fileset dir="${hla13.include.dir}/dlc13" includes="**/*"/>
		</copy>
		<!-- IEEE-1516e -->
		<mkdir dir="${dist.sandbox.dir}/include/ieee1516e"/>
		<copy todir="${dist.sandbox.dir}/include/ieee1516e">
			<fileset dir="${ieee1516e.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${dist.lib.dir}/gcc4"/>
		<copy todir="${dist.lib.dir}/gcc4">
			<fileset dir="${hla13.complete.dir}" includes="**/*.dylib"/>
			<fileset dir="${dlc13.complete.dir}" includes="**/*.dylib"/>
			<fileset dir="${ieee1516e.complete.dir}" includes="**/*.dylib"/>
		</copy>
		<!-- Reconstruct the symlinks: Ant won't copy these properly, so we have to
		     not copy them and recreate them in place. Booooooo. -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="libRTI-NG"/>    <!-- hla13 -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="libRTI-NGd"/>   <!-- hla13 -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="librti13"/>     <!-- dlc13 -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="librti13d"/>    <!-- dlc13 -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="librti1516e"/>  <!-- ieee1516e -->
		<symlink-dylib directory="${dist.lib.dir}/gcc4" name="librti1516ed"/> <!-- ieee1516e -->
		<chmod dir="${dist.lib.dir}/gcc4" perm="755" includes="**/*.dylib,**/*.jnilib,**/*.so"/>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<!-- HLA 1.3 -->
		<mkdir dir="${dist.examples.dir}/cpp/hla13"/>
		<copy todir="${dist.examples.dir}/cpp/hla13">
			<fileset dir="${hla13.example.dir}" includes="**/*"/>
		</copy>
		<chmod dir="${dist.examples.dir}/cpp/hla13" perm="777" includes="**/*.sh"/>
		<!-- IEEE-1516e -->
		<mkdir dir="${dist.examples.dir}/cpp/ieee1516e"/>
		<copy todir="${dist.examples.dir}/cpp/ieee1516e">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*"/>
		</copy>
		<chmod dir="${dist.examples.dir}/cpp/ieee1516e" perm="777" includes="**/*.sh"/>
	</target>

	<!-- ================================================================================= -->
	<!--                             Installer Creation Targets                            -->
	<!-- ================================================================================= -->
	<!-- No special installation tasks to do for this build -->
	<!--<target name="installer" extensionOf="master.installer"/>-->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent release target. This will run a clean and then compile all code, run all
	     tests, generate a sandbox and place all additional release artefacts inside in prep
	     for release.
	-->
	<target name="release" extensionOf="master.release" depends="clean,test,sandbox"/>

</project>
