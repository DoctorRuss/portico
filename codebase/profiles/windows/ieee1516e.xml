<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="ieee1516e">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Windows 32-bit C++ build profile for IEEE-1516 (2010) Interface [HLA Evolved]
	</description>

	<!-- ==== Basic Properties ==== -->
	<!-- Get a reference to the JDK we want to use, falling back on the given default -->
	<getJdk property="jdk.home.win32" arch="x86" fallback="${jdk.default.win32}"/>
	<getJdk property="jdk.home.win64" arch="amd64" fallback="${jdk.default.win64}"/>

	<!-- ================================================ -->
	<!-- ==== IEEE-1516e (2010) Interface Properties ==== -->
	<!-- ================================================ -->
	<!-- source -->
	<property name="ieee1516e.src.dir"         location="${cpp.src.dir}/ieee1516e/src"/>
	<property name="ieee1516e.include.dir"     location="${cpp.src.dir}/ieee1516e/include"/>
	<property name="ieee1516e.example.dir"     location="${cpp.src.dir}/ieee1516e/example"/>

	<!-- build -->
	<property name="ieee1516e.build.dir"       location="${build.dir}/cpp/win32/ieee1516e"/>
	<property name="ieee1516e.complete.dir"    location="${ieee1516e.build.dir}/complete"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- See profiles/project.libraries.xml -->
	<!-- <property name="cppunit.dir"     location="..."/> -->
	<!-- <property name="cppunit.include" location="..."/> -->
	<!-- <property name="cppunit.lib"     location="..."/> -->

	<!-- ================================================================================= -->
	<!--                             Macro: msvc-ieee1516                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The various C++ compiling commands ultimately have a lot in common.
		 They share the same source and include base, the same preprocessor
		 definitions (depending on debug or release), very similar library
		 names and similar library dependencies. Despite being *very* similar,
		 each of the builds requires something just a little bit different.
		 
		 This macro exists to try and hide a lot of this little detail and only
		 expose to the tasks the specific variables that motivate changes for
		 each build: compiler, target architecture and build type. Depending on
		 these values, the macro will compile up all the default source code into
		 separate working directories, adjust library names, preprocessor definitions,
		 compiler and linker arguments appropriately, in addition to any other
		 tasks that need to be done.
		 
		 The output from running this macro will be librti1516e and libfedtime1516e
		 libraries (names updated approrpiate for debug/release and 32/64-bit)
		 dropped into ${ieee1516e.complete.dir}
		 
		 Usage:
			* <msvc-ieee1516e compiler="vc10" arch="x86" build="debug"/>
			
		 Arguments:
			* compiler: The compiler to use (vc10, vc9 or vc8)
			* arch:     The platform architecture (x86 or amd64)
			* build:    The build type (debug or release)
	-->	 
	<macrodef name="msvc-ieee1516e" description="(IEEE-1516e) Compile the libFedTime library">
		<!-- Attributes -->
		<attribute name="compiler" description="vc10, vc9, or vc8"/>
		<attribute name="arch"     description="x86 or amd64"/>
		<attribute name="build"    description="release or debug"/>

		<sequential>
			<!-- Local properties used in the compile. This declares them so
			     that any previous value is hidden. In the sections below we
			     will give them values depending on whether we are compiling
			     up a 32/64-bit, debug/release library. -->
			<local name="_bitness"/>     <!-- appends "64" or "" to end of library name -->
			<local name="_d"/>           <!-- appends "d" or "" to end of library name -->
			<local name="_cargs"/>       <!-- compiler arguments -->
			<local name="_largs"/>       <!-- linker arguments -->
			<local name="_buildsymbol"/> <!-- adds "DEBUG" or "RELEASE" symbol definition -->
			<local name="_jdkhome"/>     <!-- path to either 32 or 64-bit JDK -->

			<!-- Are we building for 32-bit or 64-bit? -->
			<if><equals arg1="@{arch}" arg2="amd64"/><then>
				<property name="_bitness" value="64"/>
				<property name="_jdkhome" value="${jdk.home.win64}"/>
			</then><else>
				<property name="_bitness" value=""/>
				<property name="_jdkhome" value="${jdk.home.win32}"/>
			</else></if>

			<!-- Is this a Debug or Release build? -->
			<if><equals arg1="@{build}" arg2="debug"/><then>
				<!-- Debug Build -->
				<property name="_d"           value="d"/>
				<property name="_cargs"       value="${compiler.args.debug}"/>
				<property name="_largs"       value="/DEBUG"/>
				<property name="_buildsymbol" value="DEBUG"/>
			</then><else>
				<!-- Release Build -->
				<property name="_d"           value=""/>
				<property name="_cargs"       value="${compiler.args.release}"/>
				<property name="_largs"       value=""/>
				<property name="_buildsymbol" value="RELEASE"/>
			</else></if>

			<!-- ========================== -->
			<!-- Do the library compilation -->
			<!-- ========================== -->
			<!-- Build the main DLL -->
			<echo message="(IEEE-1516e) Building librti1516e${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="librti1516e${_bitness}${_d}"
			         workdir="${ieee1516e.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${ieee1516e.complete.dir}/@{compiler}"
			         type="shared"
			         arch="@{arch}"
			         compiler="@{compiler}"
			         compilerArgs="${_cargs}"
			         linkerArgs="${_largs}">
				<fileset dir="${ieee1516e.src.dir}">
					<include name="**/*.cpp"/>
					<exclude name="types/time/LogicalTimeFactoryFactory.cpp"/>
				</fileset>
				<includepath path="${ieee1516e.include.dir}"/>
				<includepath path="${ieee1516e.src.dir}"/>
				<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
				<define name="BUILDING_RTI"/>
				<define name="RTI_DISABLE_WARNINGS"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<library path="${_jdkhome}/lib" libs="jvm"/>
			</cpptask>			

			<!-- library: libfedtime -->
			<echo message="(IEEE-1516e) Building libfedtime1516e${_bitness}${_d} (@{compiler}-@{build} @{arch})"/>
			<cpptask outfile="libfedtime1516e${_bitness}${_d}"
			         workdir="${ieee1516e.build.dir}/@{compiler}/@{arch}/@{build}"
					 outdir="${ieee1516e.complete.dir}/@{compiler}"
			         type="shared"
			         arch="@{arch}"
			         compiler="@{compiler}"
			         compilerArgs="${_cargs}"
			         linkerArgs="${_largs}">
				<fileset dir="${ieee1516e.src.dir}">
					<include name="types/time/LogicalTimeFactoryFactory.cpp"/>
				</fileset>
				<includepath path="${ieee1516e.include.dir}"/>
				<includepath path="${ieee1516e.src.dir}"/>
				<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
				<define name="BUILDING_FEDTIME"/>
				<define name="RTI_DISABLE_WARNINGS"/>
				<define name="${_buildsymbol}"/> <!-- DEBUG or RELEASE -->
				<library path="${_jdkhome}/lib" libs="jvm"/>
				<library path="${ieee1516e.complete.dir}/@{compiler}"
				         libs="rti1516e${_bitness}${_d}"/>
			</cpptask>
		</sequential>
	</macrodef>

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="cpp.clean">
		<delete dir="${ieee1516e.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                             High-level Compile Targets                            -->
	<!-- ================================================================================= -->
	<!-- extends on the main cpp compiling extension point declared externally -->
	<extension-point name="compile"
	                 extensionOf="cpp.compile"
					 description="Compile the full IEEE-1516e interface"/>
	
	<!-- ================================================================= -->
	<!--             Visual Studio 2010 (vc10) Compile Targets             -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2010 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<extension-point name="compile.vc10"       extensionOf="compile"/>
	<extension-point name="compile.vc10.x86"   extensionOf="compile.vc10"/>
	<extension-point name="compile.vc10.amd64" extensionOf="compile.vc10"/>
	
	<target name="compile.vc10.x86.debug" extensionOf="compile.vc10.x86">
		<msvc-ieee1516e compiler="vc10" arch="x86" build="debug"/>
	</target>

	<target name="compile.vc10.x86.release" extensionOf="compile.vc10.x86">
		<msvc-ieee1516e compiler="vc10" arch="x86" build="release"/>
	</target>

	<target name="compile.vc10.amd64.debug" extensionOf="compile.vc10.amd64">
		<msvc-ieee1516e compiler="vc10" arch="amd64" build="debug"/>
	</target>

	<target name="compile.vc10.amd64.release" extensionOf="compile.vc10.amd64">
		<msvc-ieee1516e compiler="vc10" arch="amd64" build="release"/>
	</target>

	<!-- ================================================================= -->
	<!--             Visual Studio 2008 (vc9) Compile Targets              -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2008 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<extension-point name="compile.vc9"       extensionOf="compile"/>
	<extension-point name="compile.vc9.x86"   extensionOf="compile.vc9"/>
	<extension-point name="compile.vc9.amd64" extensionOf="compile.vc9"/>

	<target name="compile.vc9.x86.debug" extensionOf="compile.vc9.x86">
		<msvc-ieee1516e compiler="vc9" arch="x86" build="debug"/>
	</target>

	<target name="compile.vc9.x86.release" extensionOf="compile.vc9.x86">
		<msvc-ieee1516e compiler="vc9" arch="x86" build="release"/>
	</target>

	<target name="compile.vc9.amd64.debug" extensionOf="compile.vc9.amd64">
		<msvc-ieee1516e compiler="vc9" arch="amd64" build="debug"/>
	</target>

	<target name="compile.vc9.amd64.release" extensionOf="compile.vc9.amd64">
		<msvc-ieee1516e compiler="vc9" arch="amd64" build="release"/>
	</target>

	<!-- ================================================================= -->
	<!--             Visual Studio 2005 (vc8) Compile Targets              -->
	<!-- ================================================================= -->
	<!-- The Visual Studio 2005 related extension points.
	     We have one of these for each supported platform architecture so
		 that we can compile all the targets for each arch as a group.
	-->
	<extension-point name="compile.vc8"       extensionOf="compile"/>
	<extension-point name="compile.vc8.x86"   extensionOf="compile.vc8"/>
	<extension-point name="compile.vc8.amd64" extensionOf="compile.vc8"/>

	<target name="compile.vc8.x86.debug" extensionOf="compile.vc8.x86">
		<msvc-ieee1516e compiler="vc8" arch="x86" build="debug"/>
	</target>

	<target name="compile.vc8.x86.release" extensionOf="compile.vc8.x86">
		<msvc-ieee1516e compiler="vc8" arch="x86" build="release"/>
	</target>

	<target name="compile.vc8.amd64.debug" extensionOf="compile.vc8.amd64">
		<msvc-ieee1516e compiler="vc8" arch="amd64" build="debug"/>
	</target>

	<target name="compile.vc8.amd64.release" extensionOf="compile.vc8.amd64">
		<msvc-ieee1516e compiler="vc8" arch="amd64" build="release"/>
	</target>
	
	<!-- ==================================== -->
	<!--      IEEE-1516e Example Federate     -->
	<!-- ==================================== -->
	<!-- Compiles the 1516e example federate. Doesn't do much except
	     assure that we can actually compile and link it to Portico.
		 Only validates this with the latest supported compiler. -->
	<target name="example.compile.x86" depends="compile.vc10.x86.debug">
		<msvc outfile="ieee1516e-example"
		      workdir="${ieee1516e.build.dir}/ieee1516e-example"
		      type="executable"
		      compilerArgs="/Zi /Od /EHsc /GR /MTd">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*.cpp"/>
			<includepath path="${ieee1516e.include.dir}"/>
			<define name="DEBUG"/>
			<library path="${ieee1516e.complete.dir}/vc10" libs="rti1516ed,fedtime1516ed"/>
			<library path="${jdk.home.win32}/lib" libs="jvm"/>
		</msvc>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->

	<!-- Not implemented for IEEE-1516e Inteface -->
	<target name="test" extensionOf="cpp.test">
		<echo>No unit test suite for the C++ IEEE-1516e Interface</echo>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="cpp.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${dist.sandbox.dir}/include/ieee1516e"/>
		<copy todir="${dist.sandbox.dir}/include/ieee1516e">
			<fileset dir="${ieee1516e.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${dist.lib.dir}"/>
		<copy todir="${dist.lib.dir}">
			<fileset dir="${ieee1516e.complete.dir}" includes="**/*.lib,**/*.exp,**/*.pdb"/>
		</copy>
		<!-- Copy across the C++ dlls -->
		<mkdir dir="${dist.bin.dir}"/>
		<copy todir="${dist.bin.dir}">
			<fileset dir="${ieee1516e.complete.dir}" includes="**/*.dll"/>
		</copy>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${dist.examples.dir}/cpp/ieee1516e"/>
		<copy todir="${dist.examples.dir}/cpp/ieee1516e">
			<fileset dir="${ieee1516e.example.dir}" includes="**/*"/>
		</copy>
	</target>

	<!-- ================================================================================= -->
	<!--                                 Installer Targets                                 -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- Not required for an interface build -->

</project>
