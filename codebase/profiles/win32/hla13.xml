<?xml version="1.0"?>
<!--
                  Welcome to the Portico Build System

       The Portico build system is an artefact-driven, modular, Ant
       based system. The base framework is split up over a number of
       different build files (base structure, macros, etc...) and is
       designed to be extended rather than modified. The full system
       is introduced and described in the online documentation:
       
       http://porticoproject.org/index.php?title=Building_Portico
-->
<project name="hla13">

	<!-- ================================================================================= -->
	<!--                                 General Settings                                  -->
	<!-- ================================================================================= -->
	<description>
		Windows 32-bit C++ build profile for HLA v1.3 Interface
	</description>

	<!-- ==== Basic Properties ==== -->
	<!-- Get a reference to the JDK we want to use, falling back on the given default -->
	<getJdk property="jdk.home.win32" arch="x86" fallback="${jdk.default.win32}"/>

	<!-- ==================================== -->
	<!-- ==== HLA13 Interface Properties ==== -->
	<!-- ==================================== -->
	<!-- source -->
	<property name="hla13.src.dir"             location="${cpp.src.dir}/hla13/src"/>
	<property name="hla13.include.dir"         location="${cpp.src.dir}/hla13/include/hla13"/>
	<property name="hla13.test.src.dir"        location="${cpp.src.dir}/hla13/test"/>
	<property name="hla13.example.dir"         location="${cpp.src.dir}/hla13/example"/>

	<!-- build -->
	<property name="hla13.build.dir"           location="${build.dir}/cpp/win32/hla13"/>
	<property name="hla13.complete.dir"        location="${hla13.build.dir}/complete"/>

	<!-- test build -->
	<property name="test13.build.dir"          location="${build.dir}/cpp/win32/test13"/>
	<property name="test13.complete.dir"       location="${test13.build.dir}/complete"/>

	<!-- =========================================================== -->
	<!--                     Project Libraries                       -->
	<!-- =========================================================== -->
	<!-- ==== Library Path Definitions ==== -->
	<!-- See profiles/project.libraries.xml -->
	<!-- <property name="cppunit.dir"     location="..."/> -->
	<!-- <property name="cppunit.include" location="..."/> -->
	<!-- <property name="cppunit.lib"     location="..."/> -->

	<!-- ================================================================================= -->
	<!--                                   Clean Targets                                   -->
	<!-- ================================================================================= -->
	<target name="clean" extensionOf="master.clean">
		<delete dir="${hla13.build.dir}"/>
		<delete dir="${test13.build.dir}"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Compile Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent compilation target. This will compile all the core Portico C++
	     interface and the associated unit test suite code.
	-->
	<target name="compile"
	        extensionOf="master.compile"
	        description="Compile 32-bit C++ HLA v1.3 Interface"
	        depends="compile.x86.debug,
	                 compile.x86.release,
	                 test.compile.x86"/>

	<!-- ======================================= -->
	<!--            HLA 1.3 Interface            -->
	<!-- ======================================= -->
	<!--                            -->
	<!-- === Win32 32-bit Debug === -->
	<!--                            -->
	<target name="compile.x86.debug">
		<!-- Build the fedtime DLL -->
		<cpp-win32 outfile="libFedTimed"
		           workdir="${hla13.build.dir}/debug"
		           outdir="${hla13.complete.dir}"
				   compilerArgs="/Zi /Od /EHsc /GR /MDd /W0"
				   linkerArgs="/DEBUG">
			<!-- Filesets and other settings -->
			<fileset dir="${hla13.src.dir}">
				<include name="time/RTIfedTime.cpp"/>
				<include name="time/FedTime.cpp"/>
				<include name="time/FedTimeFactory.cpp"/>
				<include name="types/Exception.cpp"/>
			</fileset>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
			<define name="BUILDING_RTI"/> <!-- needed to ensure Exception.cpp stuff works -->
			<define name="BUILDING_FEDTIME"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="DEBUG"/>
			<library path="${jdk.home.win32}/lib" libs="jvm"/>
		</cpp-win32>

		<!-- Build the main DLL -->
		<cpp-win32 outfile="libRTI-NGd"
		           workdir="${hla13.build.dir}/debug"
		           outdir="${hla13.complete.dir}"
				   compilerArgs="/Zi /Od /EHsc /GR /MDd /W0"
				   linkerArgs="/DEBUG">
			<fileset dir="${hla13.src.dir}">
				<include name="**/*.cpp"/>
				<exclude name="time/RTIfedTime.cpp"/>
				<exclude name="time/FedTime.cpp"/>
				<exclude name="time/FedTimeFactory.cpp"/>
			</fileset>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
			<define name="BUILDING_RTI"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="RTI_DISABLE_WARNINGS"/>
			<define name="DEBUG"/>
			<library path="${hla13.build.dir}/complete" libs="FedTimed"/>
			<library path="${jdk.home.win32}/lib" libs="jvm"/>
		</cpp-win32>
	</target>

	<!--                              -->
	<!-- === Win32 32-bit Release === -->
	<!--                              -->
	<target name="compile.x86.release" if="build.release">
		<!-- Build the fedtime DLL -->
		<cpp-win32 outfile="libFedTime"
		           workdir="${hla13.build.dir}/release"
		           outdir="${hla13.complete.dir}">
			<!-- Filesets and other settings -->
			<fileset dir="${hla13.src.dir}">
				<include name="time/RTIfedTime.cpp"/>
				<include name="time/FedTime.cpp"/>
				<include name="time/FedTimeFactory.cpp"/>
				<include name="types/Exception.cpp"/>
			</fileset>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
			<define name="BUILDING_RTI"/> <!-- needed to ensure Exception.cpp stuff works -->
			<define name="BUILDING_FEDTIME"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<library path="${jdk.home.win32}/lib" libs="jvm"/>
		</cpp-win32>

		<!-- Build the main DLL -->
		<cpp-win32 outfile="libRTI-NG"
		           workdir="${hla13.build.dir}/release"
		           outdir="${hla13.complete.dir}">
			<fileset dir="${hla13.src.dir}">
				<include name="**/*.cpp"/>
				<exclude name="time/RTIfedTime.cpp"/>
				<exclude name="time/FedTime.cpp"/>
				<exclude name="time/FedTimeFactory.cpp"/>
			</fileset>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}"/>
			<includepath path="${jdk.home.win32}/include;${jdk.home.win32}/include/win32"/>
			<define name="BUILDING_RTI"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="RTI_DISABLE_WARNINGS"/>
			<library path="${hla13.build.dir}/complete" libs="FedTime"/>
			<library path="${jdk.home.win32}/lib" libs="jvm"/>
		</cpp-win32>
	</target>

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test.compile.x86" depends="compile.x86.debug">
		<cpp-win32 outfile="test13"
		           workdir="${test13.build.dir}"
		           outdir="${test13.complete.dir}"
		           type="executable"
				   compilerArgs="/Zi /Od /EHsc /GR /MD /W0"
				   linkerArgs="">
			<fileset dir="${hla13.test.src.dir}" includes="**/*.cpp"/>
			<includepath path="${hla13.include.dir}"/>
			<includepath path="${hla13.src.dir}/hla/time"/>
			<includepath path="${cppunit.include}"/>
			<define name="RTI_USES_STD_FSTREAM"/>
			<define name="DEBUG"/>
			<library path="${hla13.complete.dir}" libs="RTI-NGd,FedTimed"/>
			<library path="${cppunit.dir}/win32/vc10" libs="cppunit"/>
		</cpp-win32>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Testing Targets                                  -->
	<!-- ================================================================================= -->

	<!-- ==================================== -->
	<!--          HLA 1.3 Test Suite          -->
	<!-- ==================================== -->
	<target name="test" extensionOf="master.test" depends="java.sandbox,test.compile.x86">
		<!-- 1. copy the testing resources into test dir (RID file etc...) -->
		<copy todir="${test13.complete.dir}">
			<fileset dir="${resources.testdata.dir}/cpptest/hla13" includes="**/*"/>
			<filterset begintoken="[" endtoken="]">
				<filter token="jarfile" value="${dist.lib.dir}/portico.jar"/>
			</filterset>
		</copy>
		<echo>Copied testing resources to ${test13.complete.dir}</echo>

		<!-- 2. run the actual test application -->
		<exec dir="${test13.complete.dir}"
		      executable="${test13.complete.dir}\test13.exe"
		      failonerror="false"
		      failifexecutionfails="false"
		      resultproperty="test13.result">
			<arg value="${test13.complete.dir}\test-results.xml"/>
			<env key="RTI_HOME" path="."/><!-- required, but we set the env up properly anyway -->
			<env key="PATH" path="${hla13.complete.dir};${jdk.home.win32}\jre\bin\client"/>
			<env key="PORTICO_DEBUG" value="OFF"/>
			<env key="CLASSPATH" path="${dist.lib.dir}\portico.jar"/>
			<env key="PORTICO_JNICHECK" value="true"/>
			<env key="TEST.GROUP" value="${test.group}"/>
		</exec>

		<!-- 3. Generate the report. This will fail the build if any of the tests failed -->
		<echo>Generating the Unit Test Report</echo>
		<cppunit-report result="${test13.result}"
		                xmlfile="${test13.complete.dir}/test-results.xml"
		                xslfile="${test13.complete.dir}/xsl/results.xsl"
		                outfile="${test13.complete.dir}/test-results.html"/>
	</target>

	<!-- ================================================================================= -->
	<!--                                  Sandbox Targets                                  -->
	<!-- ================================================================================= -->
	<!-- 
	     The main sandbox preparation target. This will aggregate together all the various
	     required artefacts scattered around the build environment into the structure that
	     should be present when installed on a users system (relative to the sandbox dir).
	-->
	<target name="sandbox" extensionOf="master.sandbox" depends="java.sandbox,compile">
		<!-- ======================= -->
		<!-- Copy across the Headers -->
		<!-- ======================= -->
		<mkdir dir="${dist.sandbox.dir}/include/hla13"/>
		<copy todir="${dist.sandbox.dir}/include/hla13">
			<fileset dir="${hla13.include.dir}" includes="**/*"/>
		</copy>

		<!-- ========================= -->
		<!-- Copy across the libraries -->
		<!-- ========================= -->
		<!-- Copy across the C++ libraries -->
		<mkdir dir="${dist.lib.dir}/vc10"/>
		<copy todir="${dist.lib.dir}/vc10">
			<fileset dir="${hla13.complete.dir}" includes="**/*.lib,**/*.exp,**/*.pdb"/>
		</copy>
		<!-- Copy across the C++ dlls -->
		<mkdir dir="${dist.bin.dir}/vc10"/>
		<copy todir="${dist.bin.dir}/vc10">
			<fileset dir="${hla13.complete.dir}" includes="**/*.dll"/>
		</copy>

		<!-- ================================= -->
		<!-- Copy across the example federates -->
		<!-- ================================= -->
		<mkdir dir="${dist.examples.dir}/cpp/hla13"/>
		<copy todir="${dist.examples.dir}/cpp/hla13">
			<fileset dir="${hla13.example.dir}" includes="**/*"/>
		</copy>
	</target>

	<!-- ================================================================================= -->
	<!--                             Installer Creation Targets                            -->
	<!-- ================================================================================= -->
	<!-- No special installation tasks to do for this build -->

	<!-- ================================================================================= -->
	<!--                             Release Generation Targets                            -->
	<!-- ================================================================================= -->
	<!-- 
	     The parent release target. This will run a clean and then compile all code, run all
	     tests, generate a sandbox and place all additional release artefacts inside in prep
	     for release.
	-->
	<target name="release" extensionOf="master.release" depends="clean,test,sandbox"/>

</project>
